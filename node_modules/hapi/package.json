{
  "name": "hapi",
  "description": "HTTP API Server framework",
  "homepage": "http://hapijs.com",
  "version": "0.13.2",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hueniverse.com",
    "url": "http://hueniverse.com"
  },
  "contributors": [
    {
      "name": "Van Nguyen",
      "email": "the.gol.effect@gmail.com"
    },
    {
      "name": "Wyatt Preul",
      "email": "wpreul@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/walmartlabs/hapi"
  },
  "main": "index",
  "keywords": [
    "framework",
    "http",
    "authentication",
    "api",
    "router"
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "hoek": "0.3.x",
    "boom": "0.2.x",
    "joi": "0.0.x",
    "lout": "0.0.x",
    "hapi-helmet": "0.0.x",
    "hapi-log": "0.0.x",
    "hawk": "0.6.x",
    "shot": "0.0.x",
    "oz": "0.0.x",
    "async": "0.1.x",
    "request": "2.11.x",
    "formidable": "1.0.x",
    "mime": "1.2.x",
    "catbox": "0.1.x",
    "cryptiles": "0.0.x",
    "iron": "0.1.x",
    "semver": "1.1.0"
  },
  "devDependencies": {
    "mocha": "1.x.x",
    "chai": "1.x.x",
    "sinon": "1.x.x",
    "handlebars": ">= 1.0.8",
    "jade": "~0.28.1"
  },
  "scripts": {
    "test": "make test && make unit"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/walmartlabs/hapi/raw/master/LICENSE"
    }
  ],
  "readme": "<a href=\"https://github.com/walmartlabs/blammo\"><img src=\"https://raw.github.com/walmartlabs/blammo/master/images/from.png\" align=\"right\" /></a>\r\n<a href=\"http://hapijs.com\"><img src=\"/images/hapi.png\" /></a>\r\n\r\nA rich framework for building restful API services. **hapi** is a configuration-centric framework in which\r\nauthentication requirements, input validation, data caching and pre-fetching, developer documentation,\r\nand other essential facilities are provided out-of-the-box and enabled using simple JSON configuration\r\nobjects. **hapi** enables developers to focus on writing reusable business logic instead of spending time\r\nwith everything else.\r\n\r\nFor the latest updates and release information follow [@hapijs](https://twitter.com/hapijs) on twitter.\r\n\r\nCurrent version: **0.13.2**\r\n\r\n[![Build Status](https://secure.travis-ci.org/walmartlabs/hapi.png)](http://travis-ci.org/walmartlabs/hapi)\r\n\r\n### [API Reference](/docs/Reference.md)\r\n\r\n### [Breaking Changes](https://github.com/walmartlabs/hapi/issues?labels=breaking+changes&state=closed)\r\n\r\n## Getting started\r\n\r\nTo demonstrate a basic example we will be creating a \"hello world\" service with a single API endpoint.\r\n\r\n### Hello World Server\r\n\r\nStart by creating a _package.json_ by running\r\n```\r\nnpm init\r\n```\r\n\r\nNow install **hapi** and have it saved to your _package.json_ dependencies by running\r\n```\r\nnpm install hapi --save\r\n```\r\n\r\nNext create an _index.js_ file and add the following contents to it:\r\n```javascript\r\nvar Hapi = require('hapi');\r\n\r\n// Create a server with a host and port\r\nvar server = new Hapi.Server('localhost', 8000);\r\n\r\n// Define the route\r\nvar hello = {\r\n    handler: function (request) {\r\n    \r\n        request.reply({ greeting: 'hello world' });\r\n    }\r\n};\r\n\r\n// Add the route\r\nserver.route({\r\n    method: 'GET',\r\n    path: '/hello',\r\n    config: hello\r\n});\r\n\r\n// Start the server\r\nserver.start();\r\n```\r\n\r\nStart the server with `node .` and navigate to the website at 'http://localhost:8000/hello' in a browser and you will see the following output:\r\n```json\r\n{\"greeting\":\"hello world\"}\r\n```\r\n\r\n### Hello World Server + Validation\r\n\r\nTo demonstrate one of the more powerful features in **hapi** we will change the 'hello' route to only respond whenever a _'name'_ is present on the querystring.  Change the _'index.js'_ so that the _'hello'_ config object looks like the following:\r\n```javascript\r\nvar hello = {\r\n    handler: function (request) {\r\n    \r\n        request.reply({ greeting: 'hello ' + request.query.name });\r\n    },\r\n    validate: { \r\n        query: {\r\n            name: Hapi.Types.String().required()\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nWhen you start the server with `node .` and navigate to 'http://localhost:8000/hello' you will get a 400 response with an error explaining that 'name' is required.  When the 'name' is omitted from the querystring the handler will not be called.  However, if you do provide a 'name' it will be echoed out in the response.  If you request 'http://localhost:8000/hello?name=John' then you will get the following response:\r\n```json\r\n{\"greeting\":\"hello John\"}\r\n```\r\n\r\nTo learn more about the various validation options you can read the [validation section](docs/Reference.md#query-validation) in the reference.\r\n",
  "readmeFilename": "README.md",
  "_id": "hapi@0.13.2",
  "dist": {
    "shasum": "84bdfb2fcf6b3b48e2888e084b99ee38e5d9a4b5"
  },
  "_from": "hapi@",
  "_resolved": "https://registry.npmjs.org/hapi/-/hapi-0.13.2.tgz"
}
